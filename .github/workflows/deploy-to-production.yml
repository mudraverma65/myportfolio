# Summary:
# Creates a new deployment on Zeit's platform, when anything is pushed in any branch (except for the "master" branch).
# Read ./README.md for extensive documentation

name: Deploy to Vercel (production)

on:
  push:
    branches:
      - 'master'
      - 'lighthouse-integration'

jobs:
  # Configures the deployment environment, install dependencies (like node, npm, etc.) that are requirements for the upcoming jobs
  # Ex: Necessary to run `yarn deploy`
  setup-environment:
    name: Setup deployment environment (Ubuntu 18.04 - Node 12.x)
    runs-on: ubuntu-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 18.11.0

  # Starts a Zeit deployment, using the production configuration file of the default institution
  # The default institution is the one defined in the `now.json` file (which is a symlink to the actual file)
  # N.B: It's Zeit that will perform the actual deployment
  start-production-deployment:
    name: Starts Vercel deployment (Production) (Ubuntu 18.04)
    runs-on: ubuntu-latest
    needs: setup-environment
    steps:
      - uses: actions/checkout@v2
      - uses: amondnet/vercel-action@v19
        with:
          vercel-token: ${{ secrets.ZEIT_TOKEN }} # Required
          vercel-args: '--prod' #Optional
          vercel-org-id: ${{ secrets.ORG_ID}} #Required
          vercel-project-id: ${{ secrets.PROJECT_ID}} #Required

          # Run Lighthouse reports in parallel of E2E tests
  run-lighthouse-tests:
    name: Run LightHouse checks (Ubuntu 18.04)
    runs-on: ubuntu-latest
    needs: start-production-deployment
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
    steps:
      - uses: actions/checkout@v1 # Get last commit pushed - XXX See https://github.com/actions/checkout
      - name: Resolving deployment url from Zeit
        # The following workflow is:
        #  - getting all deployments data (by using the scope in `now.json`)
        #  - then we get the last url (in Node.js it corresponds as `response.deployments[0].url`
        #  - and then we remove the `"` character to pre-format url
        # We need to set env the url for next step, formatted as `https://${url provided by API}`
        run: |
          apt update -y >/dev/null && apt install -y jq >/dev/null
          ZEIT_DEPLOYMENT=`curl -H 'Accept: application/json' -H 'Content-Type: application/json' -H 'Authorization: Bearer ${{ secrets.ZEIT_TOKEN }}' https://api.zeit.co/v5/now/deployments?teamId=$(cat now.json | jq -r '.scope') | jq '.deployments [0].url' | tr -d \"`
          echo "::set-env name=ZEIT_DEPLOYMENT_URL::https://$ZEIT_DEPLOYMENT"
        env:
          ZEIT_TOKEN: ${{ secrets.ZEIT_TOKEN }} # Passing github's secret to the worker
      # In order to store reports and then upload it, we need to create the folder before any tests
      - name: Create temporary folder for artifacts storage
        run: mkdir /tmp/lighthouse-artifacts

      # It runs the lighthouse report for a provided url and create a HTML report in the specified directory
      # Action documentation: https://github.com/marketplace/actions/lighthouse-check#usage-standard-example
      - name: Run Lighthouse
        uses: foo-software/lighthouse-check-action@v1.0.14
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
        id: lighthouseCheck
        with:
          outputDirectory: /tmp/lighthouse-artifacts # Used to upload artifacts.
          urls: ${{ env.ZEIT_DEPLOYMENT_URL }}

      # Upload HTML report create by lighthouse, could be useful
      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: Lighthouse reports
          path: /tmp/lighthouse-artifacts

      # Using a pre-build action to make the action fail if your score is too low. It can be really interesting to track a low score on a commit
      # You can remove this action IF you don't want lighthouse to be a blocking point in your CI
      # This default values so you need to change them by your own criteria
      # Official documentation: https://github.com/foo-software/lighthouse-check-status-action
      - name: Handle Lighthouse Check results
        uses: foo-software/lighthouse-check-status-action@v1.0.1
        with:
          lighthouseCheckResults: ${{ steps.lighthouseCheck.outputs.lighthouseCheckResults }}
          minAccessibilityScore: '50'
          minBestPracticesScore: '50'
          minPerformanceScore: '30'
          minProgressiveWebAppScore: '50'
          minSeoScore: '50'
